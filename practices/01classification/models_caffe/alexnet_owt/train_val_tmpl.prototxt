# Modification of https://github.com/soumith/convnet-benchmarks
name: "AlexNet-OWT"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "REPLACEIMAGENETMEAN"
  }
  data_param {
    source: "REPLACEIMAGENETTRAIN"
    batch_size: REPLACEBATCHSIZE
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "REPLACEIMAGENETMEAN"
  }
  data_param {
    source: "REPLACEIMAGENETVAL"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1/11x11_s4"
#  blobs_lr: 1
#  blobs_lr: 2
#  weight_decay: 1
#  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 11
    stride: 4
    pad: 2
    weight_filler {
#      type: "xavier"
#      std: 0.1
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
#      type: "constant"
#      value: 0.2
      type: "constant"
      value: 0.2
    }
  }
}
layer {
  name: "conv1/relu"
  type: "ReLU"
  bottom: "conv1/11x11_s4"
  top: "conv1/11x11_s4"
}
layer {
  name: "pool1/3x3_s2"
  type: "Pooling"
  bottom: "conv1/11x11_s4"
  top: "pool1/3x3_s2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2/5x5_s1"
  type: "Convolution"
  bottom: "pool1/3x3_s2"
  top: "conv2/5x5_s1"
#  blobs_lr: 1
#  blobs_lr: 2
#  weight_decay: 1
#  weight_decay: 0
  convolution_param {
    num_output: 192
    kernel_size: 5
    stride: 1
    pad: 2
    weight_filler {
#      type: "xavier"
#      std: 0.1
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
#      type: "constant"
#      value: 0.2
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "conv2/relu"
  type: "ReLU"
  bottom: "conv2/5x5_s1"
  top: "conv2/5x5_s1"
}
layer {
  name: "pool2/3x3_s2"
  type: "Pooling"
  bottom: "conv2/5x5_s1"
  top: "pool2/3x3_s2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3/3x3_s1"
  type: "Convolution"
  bottom: "pool2/3x3_s2"
  top: "conv3/3x3_s1"
#  blobs_lr: 1
#  blobs_lr: 2
#  weight_decay: 1
#  weight_decay: 0
  convolution_param {
    num_output: 384
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
#      type: "xavier"
#      std: 0.1
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
#      type: "constant"
#      value: 0.2
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv3/relu"
  type: "ReLU"
  bottom: "conv3/3x3_s1"
  top: "conv3/3x3_s1"
}
layer {
  name: "conv4/3x3_s1"
  type: "Convolution"
  bottom: "conv3/3x3_s1"
  top: "conv4/3x3_s1"
#  blobs_lr: 1
#  blobs_lr: 2
#  weight_decay: 1
#  weight_decay: 0
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "xavier"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0.2
    }
  }
}
layer {
  name: "conv4/relu"
  type: "ReLU"
  bottom: "conv4/3x3_s1"
  top: "conv4/3x3_s1"
}
layer {
  name: "conv5/3x3_s1"
  type: "Convolution"
  bottom: "conv4/3x3_s1"
  top: "conv5/3x3_s1"
#  blobs_lr: 1
#  blobs_lr: 2
#  weight_decay: 1
#  weight_decay: 0
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
#      type: "xavier"
#      std: 0.1
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
#      type: "constant"
#      value: 0.2
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "conv5/relu"
  type: "ReLU"
  bottom: "conv5/3x3_s1"
  top: "conv5/3x3_s1"
}
layer {
  name: "pool5/3x3_s2"
  type: "Pooling"
  bottom: "conv5/3x3_s1"
  top: "pool5/3x3_s2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5/3x3_s2"
  top: "fc6"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "conv1/relu"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "conv1/relu"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "top-1"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "top1"
  include {
    phase: TEST
  }
}
layer {
  name: "top-5"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "top5"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}

